version: 0.1
component: build
shell: bash

steps:
  - type: Command
    name: "Replace OIC Package via PUT (OAuth)"
    timeoutInSeconds: 1200
    command: |
      set -euo pipefail

      # ===== Required parameters (define them in DevOps) =====
      : "${OIC_HOST:?Missing OIC_HOST}"                # e.g. https://design.integration.<region>.ocp.oraclecloud.com
      : "${OIC_INSTANCE_ID:?Missing OIC_INSTANCE_ID}"  # Service instance short name
      : "${PKG_FILE:?Missing PKG_FILE}"                # Full path to package archive (.par/.zip)
      : "${OAUTH_TOKEN_URL:?Missing OAUTH_TOKEN_URL}"
      : "${OAUTH_CLIENT_ID:?Missing OAUTH_CLIENT_ID}"
      : "${OAUTH_CLIENT_SECRET:?Missing OAUTH_CLIENT_SECRET}"
      : "${OAUTH_SCOPE:=}"                             # optional

      [ -f "$PKG_FILE" ] || { echo "❌ Package file not found: $PKG_FILE"; exit 1; }

      echo ">> OIC_HOST = $OIC_HOST"
      echo ">> OIC_INSTANCE_ID = $OIC_INSTANCE_ID"
      echo ">> PKG_FILE = $PKG_FILE"

      BASE="$OIC_HOST/ic/api/integration/v1"

      # ===== Get OAuth2 token (client_credentials) =====
      TOKEN=$(curl -s -X POST "$OAUTH_TOKEN_URL" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "grant_type=client_credentials&client_id=$OAUTH_CLIENT_ID&client_secret=$OAUTH_CLIENT_SECRET&scope=$OAUTH_SCOPE" \
        | python3 -c "import sys,json; print(json.load(sys.stdin).get('access_token',''))")
      [ -n "$TOKEN" ] || { echo "❌ Could not obtain access_token"; exit 1; }

      # ===== PUT /packages/archive (replace) =====
      echo "== Uploading package (REPLACE via PUT) =="
      RESP_FILE="$(mktemp)"
      HTTP_CODE=$(curl -s -S -o "$RESP_FILE" -w "%{http_code}" \
        -H "Authorization: Bearer $TOKEN" \
        -X PUT "$BASE/packages/archive?integrationInstance=${OIC_INSTANCE_ID}" \
        -F "file=@${PKG_FILE}" \
        -F "type=application/octet-stream" || true)

      if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "204" ]; then
        echo "✅ Package replace OK — HTTP $HTTP_CODE"
        rm -f "$RESP_FILE"
        exit 0
      fi

      echo "❌ Replace failed — HTTP $HTTP_CODE"
      echo "— Response —"
      sed -n '1,200p' "$RESP_FILE" || true
      rm -f "$RESP_FILE"
      exit 1
