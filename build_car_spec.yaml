version: 0.1
component: build
shell: bash

steps:
  - type: Command
    name: "Upsert OIC Project (.car) (OAuth) — multipart import"
    timeoutInSeconds: 1800
    command: |
      set -euo pipefail

      # ===== Parameters =====
      : "${OIC_HOST:?Missing OIC_HOST}"                # https://design.integration.<region>.ocp.oraclecloud.com
      : "${OIC_INSTANCE_ID:?Missing OIC_INSTANCE_ID}"  # Instance short name (About > Service instance)
      : "${PROJ_ID:?Missing PROJ_ID}"                  # Project identifier in OIC (e.g. TEST_PROJECT)
      : "${OAUTH_TOKEN_URL:?Missing OAUTH_TOKEN_URL}"
      : "${OAUTH_CLIENT_ID:?Missing OAUTH_CLIENT_ID}"
      : "${OAUTH_CLIENT_SECRET:?Missing OAUTH_CLIENT_SECRET}"
      : "${OAUTH_SCOPE:=}"                             # can be empty

      echo ">> OIC_HOST=$OIC_HOST"
      echo ">> OIC_INSTANCE_ID=$OIC_INSTANCE_ID"
      echo ">> PROJ_ID=$PROJ_ID"

      # ===== Locate .car file under PAAS/OIC/Integrations (with recursive fallback) =====
      CAR_DIR="PAAS/OIC/Integrations"
      echo ">> Listing ${CAR_DIR}:"
      ls -la "${CAR_DIR}" || true

      CAR_FILE="${CAR_DIR}/${PROJ_ID}.car"
      if [ ! -f "$CAR_FILE" ]; then
        echo ">> ${CAR_FILE} not found. Trying recursive search under PAAS/OIC…"
        CAR_FILE="$(find PAAS/OIC -type f -iname '*.car' | head -n1 || true)"
      fi
      [ -n "$CAR_FILE" ] && [ -f "$CAR_FILE" ] || { echo "❌ No .car found under PAAS/OIC (looked in ${CAR_DIR} and recursively)."; exit 1; }
      echo ">> Using .car: $CAR_FILE"

      # ===== Get OAuth2 token (client_credentials) =====
      TOKEN=$(curl -s -X POST "$OAUTH_TOKEN_URL" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "grant_type=client_credentials&client_id=$OAUTH_CLIENT_ID&client_secret=$OAUTH_CLIENT_SECRET&scope=$OAUTH_SCOPE" \
        | python3 -c "import sys,json; print(json.load(sys.stdin).get('access_token',''))")
      [ -n "$TOKEN" ] || { echo "❌ Could not obtain access_token"; exit 1; }

      BASE="$OIC_HOST/ic/api/integration/v1"

      # ===== Helpers (sin heredocs) =====
      urlencode() {
        python3 -c 'import urllib.parse,sys; print(urllib.parse.quote(sys.argv[1], safe=""))' "$1"
      }

      # POST /projects/{projectId}/integrations/{id} where id = URLENCODE(code|version)
      proj_deactivate() {
        local proj="$1" ; local code="$2" ; local ver="$3"
        local id_encoded
        id_encoded="$(urlencode "${code}|${ver}")"
        echo ">> Deactivating ${code}|${ver}"
        curl -f -s -S \
          -H "Authorization: Bearer $TOKEN" \
          -H "X-HTTP-Method-Override: PATCH" \
          -H "Content-Type: application/json" \
          -H "Accept: application/json" \
          -d '{"status":"DEACTIVATED"}' \
          -X POST "$BASE/projects/${proj}/integrations/${id_encoded}?integrationInstance=${OIC_INSTANCE_ID}" >/dev/null || {
            echo "⚠️ Could not PATCH ${code}|${ver} (maybe not in project or already inactive)"
          }
      }

      # Lista integraciones y emite: CODE|VERSION|STATUS (upper) — usando archivo Python temporal con printf (sin heredocs)
      list_proj_integrations() {
        local proj="$1" ; local outfile_json="$2"
        curl -s -H "Authorization: Bearer $TOKEN" \
          "$BASE/projects/${proj}/integrations?integrationInstance=${OIC_INSTANCE_ID}" > "$outfile_json"

        PYFILE="$(mktemp)"
        printf '%s\n' \
          'import sys, json' \
          'p = json.load(open(sys.argv[1], "rb"))' \
          'arr = []' \
          'if isinstance(p, dict):' \
          '    arr = p.get("items") or p.get("integrations") or []' \
          'elif isinstance(p, list):' \
          '    arr = p' \
          'for v in arr:' \
          '    if not isinstance(v, dict):' \
          '        continue' \
          '    code = v.get("code") or v.get("name")' \
          '    ver  = v.get("version") or v.get("integrationVersion")' \
          '    st   = (v.get("activation-status") or v.get("status") or "").upper()' \
          '    if code and ver:' \
          '        print(f"{code}|{ver}|{st}")' \
        > "$PYFILE"

        python3 "$PYFILE" "$outfile_json"
        rm -f "$PYFILE"
      }

      # ===== 1) Pre-deactivate ACTIVE integrations =====
      echo "== Pre-deactivate active integrations =="
      TMP_JSON="$(mktemp)"
      if list_proj_integrations "$PROJ_ID" "$TMP_JSON" >/tmp/integrs.list 2>/dev/null; then
        while IFS='|' read -r CODE VER STATUS; do
          [ -n "${CODE:-}" ] || continue
          if echo "${STATUS:-}" | grep -Eq 'ACTIV'; then
            proj_deactivate "$PROJ_ID" "$CODE" "$VER"
            sleep 8
          else
            echo ">> ${CODE}|${VER} is ${STATUS:-UNKNOWN}, no deactivation needed."
          fi
        done < /tmp/integrs.list
      else
        echo ">> Skipping pre-deactivate (could not list integrations)"
      fi

      # ===== 2) Delete project if exists =====
      echo "== Checking if project exists =="
      HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
        -H "Authorization: Bearer $TOKEN" \
        "$BASE/projects/${PROJ_ID}?integrationInstance=${OIC_INSTANCE_ID}")

      if [ "$HTTP_CODE" = "200" ]; then
        echo ">> Project ${PROJ_ID} exists → deleting…"
        DEL_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
          -H "Authorization: Bearer $TOKEN" \
          "$BASE/projects/${PROJ_ID}?integrationInstance=${OIC_INSTANCE_ID}")
        if [ "$DEL_CODE" = "204" ] || [ "$DEL_CODE" = "200" ]; then
          echo "✔ Deleted ${PROJ_ID}"
        elif [ "$DEL_CODE" = "412" ]; then
          echo "❌ 412 Precondition Failed: some integrations still active."
          echo ">> Current states:"
          TMP2="$(mktemp)"
          list_proj_integrations "$PROJ_ID" "$TMP2"
          while IFS='|' read -r C V S; do
            if echo "${S:-}" | grep -Eq 'ACTIV'; then
              echo "   - ${C}|${V}|${S}"
            fi
          done < <(cat "$TMP2")
          rm -f "$TMP2"
          exit 1
        else
          echo "❌ DELETE /projects/${PROJ_ID} returned $DEL_CODE"
          exit 1
        fi
      else
        echo ">> Project ${PROJ_ID} not found → will import new"
      fi

      # ===== 3) Import (Add) project .car =====
      echo "== Importing Project (.car) =="
      curl -f -s -S -X POST \
        -H "Authorization: Bearer $TOKEN" \
        -F "file=@${CAR_FILE}" \
        -F "type=application/octet-stream" \
        "$BASE/projects/archive?integrationInstance=${OIC_INSTANCE_ID}"
      echo "✔ Import OK: $CAR_FILE"

      echo "✅ Project upsert completed"
